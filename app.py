import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
import statsmodels.api as sm
import datetime
import io
import logging

# Configura√ß√£o da p√°gina com tema visual
st.set_page_config(
    page_title="An√°lise de Dados SAC/Telemarketing",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilo CSS personalizado
st.markdown("""
    <style>
    .main-title {
        color: #1E90FF;
        font-size: 2.5em;
        font-weight: bold;
        text-align: center;
        margin-bottom: 0.5em;
    }
    .subtitle {
        color: #696969;
        font-size: 1.4em;
        font-weight: normal;
        text-align: center;  /* Centraliza o subt√≠tulo */
    }
    .section-title {
        color: #4682B4;
        font-size: 1.8em;
        font-weight: bold;
        margin-top: 1em;
    }
    .subheader {
        color: #696969;
        font-size: 1.4em;
        font-weight: normal;
    }
    .stButton>button {
        background-color: #1E90FF;
        color: white;
        border-radius: 5px;
    }
    .stMetric {
        background-color: #F0F8FF;
        padding: 10px;
        border-radius: 5px;
    }
    </style>
""", unsafe_allow_html=True)

# Initialize session state
if 'df' not in st.session_state:
    st.session_state.df = None
if 'df_limpo' not in st.session_state:
    st.session_state.df_limpo = None
if 'n_clusters' not in st.session_state:
    st.session_state.n_clusters = 4
if 'selected_dates' not in st.session_state:
    st.session_state.selected_dates = None
if 'selected_canal' not in st.session_state:
    st.session_state.selected_canal = 'Todos'
if 'selected_tipo' not in st.session_state:
    st.session_state.selected_tipo = 'Todos'
if 'selected_operadores' not in st.session_state:
    st.session_state.selected_operadores = []
if 'model_trained' not in st.session_state:
    st.session_state.model_trained = False
if 'model' not in st.session_state:
    st.session_state.model = None
if 'accuracy' not in st.session_state:
    st.session_state.accuracy = None
if 'report_df' not in st.session_state:
    st.session_state.report_df = None
if 'features_df' not in st.session_state:
    st.session_state.features_df = None

# Banner inicial
st.markdown('<div class="main-title">üìû An√°lise de Dados do SAC/Telemarketing</div>', unsafe_allow_html=True)
st.markdown('<div class="subtitle">Dashboard interativo para otimiza√ß√£o de processos e aumento de lucratividade</div>', unsafe_allow_html=True)

# Sidebar personalizada
with st.sidebar:
    st.markdown("### Sobre o Projeto üåü")
    st.markdown("""
    Este dashboard analisa dados de SAC/Telemarketing em 6 etapas:
    - üì• **Coleta de dados**
    - üßπ **Limpeza de dados**
    - üîç **Explora√ß√£o de dados (EDA)**
    - üìà **An√°lise e interpreta√ß√£o**
    - üìä **Visualiza√ß√£o e relat√≥rios**
    - ‚úÖ **Tomada de decis√£o**
    """)
    st.markdown("### Tecnologias Utilizadas üõ†Ô∏è")
    st.markdown("""
    - Python
    - Pandas
    - NumPy
    - Plotly
    - Streamlit
    - Scikit-learn
    - statsmodels   
    """)
st.divider()

# Fun√ß√£o para carregar os dados
def carregar_dados():
    with st.spinner("Carregando dados... ‚è≥"):
        try:
            df = pd.read_csv('dados_falsos_SAC-Telemarketing.csv')
            return df
        except FileNotFoundError:
            st.warning("Arquivo de dados n√£o encontrado no diret√≥rio do projeto.")
            uploaded_file = st.file_uploader("Fa√ßa o upload do arquivo CSV de dados üìÅ", type=['csv'])
            if uploaded_file is not None:
                df = pd.read_csv(uploaded_file)
                return df
            return None

# ETAPA 1: COLETA DE DADOS
st.markdown('<div class="section-title">1. Coleta de Dados üì•</div>', unsafe_allow_html=True)
if st.session_state.df is None:
    st.session_state.df = carregar_dados()

if st.session_state.df is not None:
    st.success("‚úÖ Dados carregados com sucesso!")
    with st.expander("Pr√©via dos Dados"):
        st.markdown('<div class="subheader">Primeiras Linhas do Dataset</div>', unsafe_allow_html=True)
        st.dataframe(st.session_state.df.head())
    st.divider()
    with st.expander("Informa√ß√µes do Dataset"):
        st.markdown('<div class="subheader">Estrutura dos Dados</div>', unsafe_allow_html=True)
        buffer = io.StringIO()
        st.session_state.df.info(buf=buffer)
        info_str = buffer.getvalue()
        st.text(info_str)
    st.divider()
    with st.expander("Estat√≠sticas Descritivas"):
        st.markdown('<div class="subheader">Resumo Estat√≠stico</div>', unsafe_allow_html=True)
        st.dataframe(st.session_state.df.describe())
st.divider()

# ETAPA 2: LIMPEZA DE DADOS
st.markdown('<div class="section-title">2. Limpeza de Dados üßπ</div>', unsafe_allow_html=True)
if st.session_state.df is not None:
    st.markdown('<div class="subheader">Valores Ausentes por Coluna</div>', unsafe_allow_html=True)
    valores_ausentes = st.session_state.df.isnull().sum()
    st.write(valores_ausentes)
    st.divider()
    st.markdown('<div class="subheader">N√∫mero de Linhas Duplicadas</div>', unsafe_allow_html=True)
    duplicatas = st.session_state.df.duplicated().sum()
    st.write(f"Foram encontradas {duplicatas} linhas duplicadas")
    st.divider()
    st.markdown('<div class="subheader">Limpeza em Progresso...</div>', unsafe_allow_html=True)
    
    if st.session_state.df_limpo is None:
        with st.spinner("Limpando dados... ‚è≥"):
            df = st.session_state.df.copy()
            df['Data/Hora do Atendimento'] = pd.to_datetime(df['Data/Hora do Atendimento'], errors='coerce', dayfirst=True)
            df['Data'] = df['Data/Hora do Atendimento'].dt.date
            df['Hora'] = df['Data/Hora do Atendimento'].dt.hour
            df['Dia da Semana'] = df['Data/Hora do Atendimento'].dt.day_name()
            df['M√™s'] = df['Data/Hora do Atendimento'].dt.month_name()
            df['Satisfa√ß√£o do Cliente (1-5)'] = pd.to_numeric(df['Satisfa√ß√£o do Cliente (1-5)'], errors='coerce')
            df['Tempo M√©dio de Atendimento (TMA) em minutos'] = pd.to_numeric(df['Tempo M√©dio de Atendimento (TMA) em minutos'], errors='coerce')
            df['Tempo de Espera em minutos'] = pd.to_numeric(df['Tempo de Espera em minutos'], errors='coerce')
            df['Tempo de P√≥s-Atendimento (minutos)'] = pd.to_numeric(df['Tempo de P√≥s-Atendimento (minutos)'], errors='coerce')
            df['Resolu√ß√£o no Primeiro Contato?'] = df['Resolu√ß√£o no Primeiro Contato?'].map({'Sim': True, 'N√£o': False})
            colunas_numericas = ['Tempo M√©dio de Atendimento (TMA) em minutos', 'Satisfa√ß√£o do Cliente (1-5)', 
                                'Tempo de Espera em minutos', 'Tempo de P√≥s-Atendimento (minutos)']
            for coluna in colunas_numericas:
                df[coluna] = df[coluna].fillna(df[coluna].mean())
            colunas_categoricas = ['Tipo de Atendimento', 'Canal de Atendimento', 'Produto/Servi√ßo Relacionado', 
                                  'Encaminhamento para Outro Setor', 'Status do Atendimento']
            for coluna in colunas_categoricas:
                if coluna in df.columns:
                    df[coluna] = df[coluna].fillna(df[coluna].mode()[0])
            df_limpo = df.drop_duplicates()
            df_limpo['Tempo Total'] = df_limpo['Tempo de Espera em minutos'] + df_limpo['Tempo M√©dio de Atendimento (TMA) em minutos'] + df_limpo['Tempo de P√≥s-Atendimento (minutos)']
            st.session_state.df_limpo = df_limpo
            st.success(f"‚úÖ Limpeza conclu√≠da! Foram removidas {len(df) - len(df_limpo)} linhas duplicadas.")
            st.write(f"Dimens√µes dos dados ap√≥s limpeza: {df_limpo.shape}")
st.divider()

# ETAPA 3: EXPLORA√á√ÉO DE DADOS (EDA)
st.markdown('<div class="section-title">3. Explora√ß√£o de Dados (EDA) üîç</div>', unsafe_allow_html=True)
if st.session_state.df_limpo is not None:
    tab1, tab2, tab3, tab4 = st.tabs(["üìÖ An√°lise Temporal", "üìè M√©tricas de Atendimento", "üòä Satisfa√ß√£o do Cliente", "üë• An√°lise por Operador"])
    
    with tab1:
        st.markdown('<div class="subheader">An√°lise Temporal dos Atendimentos</div>', unsafe_allow_html=True)
        df_por_data = st.session_state.df_limpo.groupby('Data').agg({
            'Protocolo': 'count',
            'Tempo M√©dio de Atendimento (TMA) em minutos': 'mean',
            'Satisfa√ß√£o do Cliente (1-5)': 'mean',
            'Tempo de Espera em minutos': 'mean'
        }).reset_index()
        df_por_data.columns = ['Data', 'Quantidade de Atendimentos', 'TMA M√©dio', 'Satisfa√ß√£o M√©dia', 'Tempo de Espera M√©dio']
        fig = make_subplots(rows=2, cols=1, subplot_titles=("Volume de Atendimentos", "M√©dia de Satisfa√ß√£o"))
        fig.add_trace(go.Scatter(x=df_por_data['Data'], y=df_por_data['Quantidade de Atendimentos'], mode='lines+markers', name='Atendimentos'), row=1, col=1)
        fig.add_trace(go.Scatter(x=df_por_data['Data'], y=df_por_data['Satisfa√ß√£o M√©dia'], mode='lines+markers', name='Satisfa√ß√£o'), row=2, col=1)
        fig.update_layout(height=600, width=800)
        st.plotly_chart(fig, use_container_width=True)
        st.divider()
        
        st.markdown('<div class="subheader">An√°lise por Dia da Semana</div>', unsafe_allow_html=True)
        ordem_dias = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        dict_dias = {
            'Monday': 'Segunda-feira', 'Tuesday': 'Ter√ßa-feira', 'Wednesday': 'Quarta-feira',
            'Thursday': 'Quinta-feira', 'Friday': 'Sexta-feira', 'Saturday': 'S√°bado', 'Sunday': 'Domingo'
        }
        st.session_state.df_limpo['Dia da Semana PT'] = st.session_state.df_limpo['Dia da Semana'].map(dict_dias)
        ordem_dias_pt = [dict_dias[dia] for dia in ordem_dias]
        df_dias = st.session_state.df_limpo.groupby('Dia da Semana PT').agg({
            'Protocolo': 'count',
            'Tempo M√©dio de Atendimento (TMA) em minutos': 'mean',
            'Satisfa√ß√£o do Cliente (1-5)': 'mean',
            'Tempo de Espera em minutos': 'mean'
        }).reset_index()
        df_dias['Dia da Semana PT'] = pd.Categorical(df_dias['Dia da Semana PT'], categories=ordem_dias_pt, ordered=True)
        df_dias = df_dias.sort_values('Dia da Semana PT')
        fig_dias = px.bar(df_dias, x='Dia da Semana PT', y='Protocolo', 
                         title='Volume de Atendimentos por Dia da Semana',
                         labels={'Protocolo': 'Quantidade de Atendimentos', 'Dia da Semana PT': 'Dia da Semana'})
        st.plotly_chart(fig_dias, use_container_width=True)
        st.divider()
        
        st.markdown('<div class="subheader">Distribui√ß√£o de Atendimentos por Hora do Dia</div>', unsafe_allow_html=True)
        df_horas = st.session_state.df_limpo.groupby('Hora').agg({
            'Protocolo': 'count',
            'Tempo M√©dio de Atendimento (TMA) em minutos': 'mean',
            'Satisfa√ß√£o do Cliente (1-5)': 'mean',
            'Tempo de Espera em minutos': 'mean'
        }).reset_index()
        fig_horas = px.line(df_horas, x='Hora', y='Protocolo', 
                           title='Volume de Atendimentos por Hora do Dia',
                           labels={'Protocolo': 'Quantidade de Atendimentos'})
        st.plotly_chart(fig_horas, use_container_width=True)
    
    with tab2:
        st.markdown('<div class="subheader">Desempenho por Canal de Atendimento</div>', unsafe_allow_html=True)
        df_canal = st.session_state.df_limpo.groupby('Canal de Atendimento').agg({
            'Protocolo': 'count',
            'Tempo M√©dio de Atendimento (TMA) em minutos': 'mean',
            'Satisfa√ß√£o do Cliente (1-5)': 'mean',
            'Tempo de Espera em minutos': 'mean',
            'Resolu√ß√£o no Primeiro Contato?': 'mean'
        }).reset_index()
        df_canal['Taxa de Resolu√ß√£o no Primeiro Contato'] = df_canal['Resolu√ß√£o no Primeiro Contato?'] * 100
        fig_canal = make_subplots(rows=1, cols=2, specs=[[{"type": "bar"}, {"type": "bar"}]], subplot_titles=("Tempo M√©dio de Atendimento por Canal", "Satisfa√ß√£o M√©dia por Canal"))
        fig_canal.add_trace(go.Bar(x=df_canal['Canal de Atendimento'], y=df_canal['Tempo M√©dio de Atendimento (TMA) em minutos'], name='TMA (min)'), row=1, col=1)
        fig_canal.add_trace(go.Bar(x=df_canal['Canal de Atendimento'], y=df_canal['Satisfa√ß√£o do Cliente (1-5)'], name='Satisfa√ß√£o'), row=1, col=2)
        fig_canal.update_layout(height=500, width=800)
        st.plotly_chart(fig_canal, use_container_width=True)
        st.divider()
        
        st.markdown('<div class="subheader">Desempenho por Tipo de Atendimento</div>', unsafe_allow_html=True)
        df_tipo = st.session_state.df_limpo.groupby('Tipo de Atendimento').agg({
            'Protocolo': 'count',
            'Tempo M√©dio de Atendimento (TMA) em minutos': 'mean',
            'Satisfa√ß√£o do Cliente (1-5)': 'mean',
            'Tempo de Espera em minutos': 'mean',
            'Resolu√ß√£o no Primeiro Contato?': 'mean'
        }).reset_index()
        df_tipo['Taxa de Resolu√ß√£o no Primeiro Contato'] = df_tipo['Resolu√ß√£o no Primeiro Contato?'] * 100
        df_tipo = df_tipo.sort_values('Protocolo', ascending=False)
        fig_tipo = px.bar(df_tipo, x='Tipo de Atendimento', y='Protocolo', title='Volume por Tipo de Atendimento', labels={'Protocolo': 'Quantidade de Atendimentos'})
        st.plotly_chart(fig_tipo, use_container_width=True)
        fig_eficiencia = px.scatter(df_tipo, x='Tempo M√©dio de Atendimento (TMA) em minutos', y='Satisfa√ß√£o do Cliente (1-5)', size='Protocolo', color='Taxa de Resolu√ß√£o no Primeiro Contato', hover_name='Tipo de Atendimento', title='Compara√ß√£o: TMA x Satisfa√ß√£o x Volume x Taxa de Resolu√ß√£o', labels={'Tempo M√©dio de Atendimento (TMA) em minutos': 'TMA (minutos)', 'Satisfa√ß√£o do Cliente (1-5)': 'Satisfa√ß√£o', 'Taxa de Resolu√ß√£o no Primeiro Contato': 'Taxa de Resolu√ß√£o (%)'})
        st.plotly_chart(fig_eficiencia, use_container_width=True)
        st.divider()
        
        st.markdown('<div class="subheader">Desempenho por Produto/Servi√ßo</div>', unsafe_allow_html=True)
        df_produto = st.session_state.df_limpo.groupby('Produto/Servi√ßo Relacionado').agg({
            'Protocolo': 'count',
            'Tempo M√©dio de Atendimento (TMA) em minutos': 'mean',
            'Satisfa√ß√£o do Cliente (1-5)': 'mean',
            'Resolu√ß√£o no Primeiro Contato?': 'mean'
        }).reset_index()
        df_produto = df_produto.sort_values('Protocolo', ascending=False).head(10)
        fig_produto = px.bar(df_produto, x='Produto/Servi√ßo Relacionado', y='Protocolo', title='Top 10 Produtos/Servi√ßos por Volume de Atendimento', labels={'Protocolo': 'Quantidade de Atendimentos'})
        st.plotly_chart(fig_produto, use_container_width=True)
    
    with tab3:
        st.markdown('<div class="subheader">Distribui√ß√£o de Satisfa√ß√£o do Cliente</div>', unsafe_allow_html=True)
        fig_satisfacao = px.histogram(st.session_state.df_limpo, x='Satisfa√ß√£o do Cliente (1-5)', nbins=5, title='Distribui√ß√£o de Satisfa√ß√£o do Cliente', labels={'Satisfa√ß√£o do Cliente (1-5)': 'N√≠vel de Satisfa√ß√£o (1-5)'})
        st.plotly_chart(fig_satisfacao, use_container_width=True)
        st.divider()
        
        st.markdown('<div class="subheader">Correla√ß√£o: Tempo de Espera vs Satisfa√ß√£o</div>', unsafe_allow_html=True)
        fig_correlacao = px.scatter(st.session_state.df_limpo, x='Tempo de Espera em minutos', y='Satisfa√ß√£o do Cliente (1-5)', title='Rela√ß√£o entre Tempo de Espera e Satisfa√ß√£o', trendline='ols', labels={'Tempo de Espera em minutos': 'Tempo de Espera (minutos)', 'Satisfa√ß√£o do Cliente (1-5)': 'Satisfa√ß√£o'})
        st.plotly_chart(fig_correlacao, use_container_width=True)
        st.divider()
        
        st.markdown('<div class="subheader">Fatores que Influenciam a Satisfa√ß√£o</div>', unsafe_allow_html=True)
        df_resolucao = st.session_state.df_limpo.groupby('Resolu√ß√£o no Primeiro Contato?').agg({'Satisfa√ß√£o do Cliente (1-5)': 'mean'}).reset_index()
        df_resolucao['Resolu√ß√£o no Primeiro Contato?'] = df_resolucao['Resolu√ß√£o no Primeiro Contato?'].map({True: 'Sim', False: 'N√£o'})
        fig_resolucao = px.bar(df_resolucao, x='Resolu√ß√£o no Primeiro Contato?', y='Satisfa√ß√£o do Cliente (1-5)', title='Impacto da Resolu√ß√£o no Primeiro Contato na Satisfa√ß√£o', labels={'Satisfa√ß√£o do Cliente (1-5)': 'Satisfa√ß√£o M√©dia', 'Resolu√ß√£o no Primeiro Contato?': 'Resolu√ß√£o no Primeiro Contato'})
        st.plotly_chart(fig_resolucao, use_container_width=True)
        st.divider()
        
        st.markdown('<div class="subheader">Satisfa√ß√£o por Dia da Semana e Hora do Dia</div>', unsafe_allow_html=True)
        df_heatmap = st.session_state.df_limpo.pivot_table(index='Dia da Semana PT', columns='Hora', values='Satisfa√ß√£o do Cliente (1-5)', aggfunc='mean')
        df_heatmap = df_heatmap.reindex(ordem_dias_pt)
        fig_heatmap = px.imshow(df_heatmap, labels=dict(x="Hora do Dia", y="Dia da Semana", color="Satisfa√ß√£o M√©dia"), title="Mapa de Calor: Satisfa√ß√£o M√©dia por Dia e Hora", color_continuous_scale="RdYlGn")
        st.plotly_chart(fig_heatmap, use_container_width=True)
    
    with tab4:
        st.markdown('<div class="subheader">An√°lise de Desempenho por Operador</div>', unsafe_allow_html=True)
        df_operador = st.session_state.df_limpo.groupby('Nome do Operador').agg({
            'Protocolo': 'count',
            'Tempo M√©dio de Atendimento (TMA) em minutos': 'mean',
            'Satisfa√ß√£o do Cliente (1-5)': 'mean',
            'Resolu√ß√£o no Primeiro Contato?': 'mean'
        }).reset_index()
        df_operador['Taxa de Resolu√ß√£o no Primeiro Contato'] = df_operador['Resolu√ß√£o no Primeiro Contato?'] * 100
        df_operador = df_operador.sort_values('Protocolo', ascending=False)
        st.markdown('<div class="subheader">Top 10 Operadores por Volume de Atendimento</div>', unsafe_allow_html=True)
        fig_top_operadores = px.bar(df_operador.head(10), x='Nome do Operador', y='Protocolo', title='Top 10 Operadores por Volume', labels={'Protocolo': 'Quantidade de Atendimentos'})
        st.plotly_chart(fig_top_operadores, use_container_width=True)
        st.divider()
        
        st.markdown('<div class="subheader">Compara√ß√£o de Desempenho entre Operadores</div>', unsafe_allow_html=True)
        selected_operadores = st.multiselect("Selecione operadores para comparar:", options=df_operador['Nome do Operador'].tolist(), default=df_operador['Nome do Operador'].head(5).tolist(), key='operadores_select')
        st.session_state.selected_operadores = selected_operadores
        if st.session_state.selected_operadores:
            df_selected = df_operador[df_operador['Nome do Operador'].isin(st.session_state.selected_operadores)]
            fig_radar = go.Figure()
            for operador in df_selected['Nome do Operador']:
                operador_data = df_selected[df_selected['Nome do Operador'] == operador]
                volume_norm = operador_data['Protocolo'].values[0] / df_operador['Protocolo'].max()
                tma_norm = 1 - (operador_data['Tempo M√©dio de Atendimento (TMA) em minutos'].values[0] / df_operador['Tempo M√©dio de Atendimento (TMA) em minutos'].max())
                satisfacao_norm = operador_data['Satisfa√ß√£o do Cliente (1-5)'].values[0] / 5
                resolucao_norm = operador_data['Taxa de Resolu√ß√£o no Primeiro Contato'].values[0] / 100
                fig_radar.add_trace(go.Scatterpolar(
                    r=[volume_norm, tma_norm, satisfacao_norm, resolucao_norm],
                    theta=['Volume', 'Efici√™ncia (TMA)', 'Satisfa√ß√£o', 'Resolu√ß√£o 1¬∫ Contato'],
                    fill='toself',
                    name=operador
                ))
            fig_radar.update_layout(polar=dict(radialaxis=dict(visible=True, range=[0, 1])), showlegend=True)
            st.plotly_chart(fig_radar, use_container_width=True)
st.divider()

# ETAPA 4: AN√ÅLISE E INTERPRETA√á√ÉO
st.markdown('<div class="section-title">4. An√°lise e Interpreta√ß√£o üìà</div>', unsafe_allow_html=True)
if st.session_state.df_limpo is not None:
    st.markdown('<div class="subheader">Segmenta√ß√£o de Atendimentos</div>', unsafe_allow_html=True)
    st.info("‚ÑπÔ∏è A segmenta√ß√£o agrupa atendimentos com caracter√≠sticas semelhantes para identificar padr√µes.")
    features = ['Tempo M√©dio de Atendimento (TMA) em minutos', 'Tempo de Espera em minutos', 'Satisfa√ß√£o do Cliente (1-5)', 'Tempo de P√≥s-Atendimento (minutos)']
    df_cluster = st.session_state.df_limpo[features].copy()
    scaler = StandardScaler()
    df_scaled = scaler.fit_transform(df_cluster)
    n_clusters = st.slider("N√∫mero de clusters para segmenta√ß√£o:", 2, 10, st.session_state.n_clusters, key='n_clusters_slider')
    st.session_state.n_clusters = n_clusters
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
    st.session_state.df_limpo['Cluster'] = kmeans.fit_predict(df_scaled)
    cluster_centers = scaler.inverse_transform(kmeans.cluster_centers_)
    cluster_results = pd.DataFrame(cluster_centers, columns=features)
    cluster_results['Cluster'] = cluster_results.index
    cluster_results['Tamanho'] = [sum(st.session_state.df_limpo['Cluster'] == i) for i in range(n_clusters)]
    cluster_results['Propor√ß√£o (%)'] = cluster_results['Tamanho'] / len(st.session_state.df_limpo) * 100
    st.markdown('<div class="subheader">Caracter√≠sticas dos Clusters</div>', unsafe_allow_html=True)
    st.dataframe(cluster_results)
    fig_clusters = px.scatter_3d(st.session_state.df_limpo, x='Tempo M√©dio de Atendimento (TMA) em minutos', y='Tempo de Espera em minutos', z='Satisfa√ß√£o do Cliente (1-5)', color='Cluster', size_max=10, opacity=0.7, title='Segmenta√ß√£o de Atendimentos por Caracter√≠sticas')
    st.plotly_chart(fig_clusters, use_container_width=True)
    st.divider()
    
    st.markdown('<div class="subheader">Interpreta√ß√£o dos Clusters</div>', unsafe_allow_html=True)
    for i in range(n_clusters):
        cluster_data = cluster_results[cluster_results['Cluster'] == i]
        tma = cluster_data['Tempo M√©dio de Atendimento (TMA) em minutos'].values[0]
        espera = cluster_data['Tempo de Espera em minutos'].values[0]
        satisfacao = cluster_data['Satisfa√ß√£o do Cliente (1-5)'].values[0]
        tamanho = cluster_data['Propor√ß√£o (%)'].values[0]
        if satisfacao >= 4.0:
            nivel_satisfacao = "alta"
        elif satisfacao >= 3.0:
            nivel_satisfacao = "m√©dia"
        else:
            nivel_satisfacao = "baixa"
        if tma <= st.session_state.df_limpo['Tempo M√©dio de Atendimento (TMA) em minutos'].mean() * 0.8:
            nivel_tma = "r√°pido"
        elif tma <= st.session_state.df_limpo['Tempo M√©dio de Atendimento (TMA) em minutos'].mean() * 1.2:
            nivel_tma = "m√©dio"
        else:
            nivel_tma = "longo"
        if espera <= st.session_state.df_limpo['Tempo de Espera em minutos'].mean() * 0.8:
            nivel_espera = "curto"
        elif espera <= st.session_state.df_limpo['Tempo de Espera em minutos'].mean() * 1.2:
            nivel_espera = "m√©dio"
        else:
            nivel_espera = "longo"
        st.markdown(f"**Cluster {i} ({tamanho:.1f}% dos atendimentos):**")
        st.markdown(f"- Atendimentos com tempo de espera **{nivel_espera}** ({espera:.2f} min)")
        st.markdown(f"- Tempo m√©dio de atendimento **{nivel_tma}** ({tma:.2f} min)")
        st.markdown(f"- Satisfa√ß√£o **{nivel_satisfacao}** ({satisfacao:.2f}/5)")
        cluster_df = st.session_state.df_limpo[st.session_state.df_limpo['Cluster'] == i]
        top_canais = cluster_df['Canal de Atendimento'].value_counts().nlargest(3)
        st.markdown("- **Top 3 canais de atendimento:**")
        for canal, contagem in top_canais.items():
            st.markdown(f"  - {canal}: {contagem} atendimentos ({contagem/len(cluster_df)*100:.1f}%)")
        resolucao_rate = cluster_df['Resolu√ß√£o no Primeiro Contato?'].mean() * 100
        st.markdown(f"- **Taxa de resolu√ß√£o no primeiro contato**: {resolucao_rate:.1f}%")
        st.markdown("---")
    st.divider()
    
    st.markdown('<div class="subheader">Modelo Preditivo para Resolu√ß√£o no Primeiro Contato</div>', unsafe_allow_html=True)
    if not st.session_state.model_trained:
        df_model = st.session_state.df_limpo.copy()
        features_cat = ['Tipo de Atendimento', 'Canal de Atendimento', 'Produto/Servi√ßo Relacionado', 'Dia da Semana PT', 'Status do Atendimento']
        features_num = ['Tempo M√©dio de Atendimento (TMA) em minutos', 'Tempo de Espera em minutos', 'Tempo de P√≥s-Atendimento (minutos)', 'Hora']
        df_model_encoded = pd.get_dummies(df_model, columns=features_cat)
        X = df_model_encoded[features_num + [col for col in df_model_encoded.columns if col.startswith(tuple(f + '_' for f in features_cat))]]
        y = df_model_encoded['Resolu√ß√£o no Primeiro Contato?']
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
        model = RandomForestClassifier(n_estimators=100, random_state=42)
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)
        report = classification_report(y_test, y_pred, output_dict=True)
        report_df = pd.DataFrame(report).transpose()
        feature_importances = model.feature_importances_
        features_df = pd.DataFrame({'Feature': X.columns, 'Import√¢ncia': feature_importances}).sort_values('Import√¢ncia', ascending=False)
        st.session_state.model = model
        st.session_state.accuracy = accuracy
        st.session_state.report_df = report_df
        st.session_state.features_df = features_df
        st.session_state.model_trained = True
    st.write(f"**Acur√°cia do modelo**: {st.session_state.accuracy:.2%}")
    st.write("**Relat√≥rio de Classifica√ß√£o:**")
    st.dataframe(st.session_state.report_df)
    st.markdown('<div class="subheader">Features Mais Importantes para Resolu√ß√£o no Primeiro Contato</div>', unsafe_allow_html=True)
    fig_importances = px.bar(st.session_state.features_df.head(10), x='Import√¢ncia', y='Feature', orientation='h', title='Top 10 Fatores que Influenciam a Resolu√ß√£o no Primeiro Contato')
    st.plotly_chart(fig_importances, use_container_width=True)
st.divider()

# ETAPA 5: VISUALIZA√á√ÉO E RELAT√ìRIOS
st.markdown('<div class="section-title">5. Visualiza√ß√£o e Relat√≥rios üìä</div>', unsafe_allow_html=True)
if st.session_state.df_limpo is not None:
    st.markdown('<div class="subheader">Dashboard Interativo de KPIs</div>', unsafe_allow_html=True)
    col1, col2, col3, col4 = st.columns(4)
    total_atendimentos = len(st.session_state.df_limpo)
    with col1:
        st.metric("üìã Total de Atendimentos", f"{total_atendimentos:,}", label_visibility="visible")
    satisfacao_media = st.session_state.df_limpo['Satisfa√ß√£o do Cliente (1-5)'].mean()
    with col2:
        st.metric("üòä Satisfa√ß√£o M√©dia", f"{satisfacao_media:.2f}/5")
    tma_global = st.session_state.df_limpo['Tempo M√©dio de Atendimento (TMA) em minutos'].mean()
    with col3:
        st.metric("‚è±Ô∏è TMA Global", f"{tma_global:.2f} min")
    taxa_resolucao = st.session_state.df_limpo['Resolu√ß√£o no Primeiro Contato?'].mean() * 100
    with col4:
        st.metric("‚úÖ Resolu√ß√£o 1¬∫ Contato", f"{taxa_resolucao:.1f}%")
    st.divider()
    
    st.markdown('<div class="subheader">An√°lise Interativa</div>', unsafe_allow_html=True)
    if 'Data' in st.session_state.df_limpo.columns:
        min_date = st.session_state.df_limpo['Data'].min()
        max_date = st.session_state.df_limpo['Data'].max()
        selected_dates = st.date_input("Selecione o per√≠odo de an√°lise:", value=(min_date, max_date), min_value=min_date, max_value=max_date, key='date_input')
        st.session_state.selected_dates = selected_dates
        if len(st.session_state.selected_dates) == 2:
            start_date, end_date = st.session_state.selected_dates
            filtered_df = st.session_state.df_limpo[(st.session_state.df_limpo['Data'] >= start_date) & (st.session_state.df_limpo['Data'] <= end_date)]
        else:
            filtered_df = st.session_state.df_limpo
    else:
        filtered_df = st.session_state.df_limpo
    canais = ['Todos'] + sorted(st.session_state.df_limpo['Canal de Atendimento'].unique().tolist())
    selected_canal = st.selectbox("Canal de Atendimento:", canais, index=canais.index(st.session_state.selected_canal), key='canal_select')
    st.session_state.selected_canal = selected_canal
    if st.session_state.selected_canal != 'Todos':
        filtered_df = filtered_df[filtered_df['Canal de Atendimento'] == st.session_state.selected_canal]
    tipos = ['Todos'] + sorted(st.session_state.df_limpo['Tipo de Atendimento'].unique().tolist())
    selected_tipo = st.selectbox("Tipo de Atendimento:", tipos, index=tipos.index(st.session_state.selected_tipo), key='tipo_select')
    st.session_state.selected_tipo = selected_tipo
    if st.session_state.selected_tipo != 'Todos':
        filtered_df = filtered_df[filtered_df['Tipo de Atendimento'] == st.session_state.selected_tipo]
    st.markdown('<div class="subheader">M√©tricas do Per√≠odo/Filtros Selecionados</div>', unsafe_allow_html=True)
    if not filtered_df.empty:
        col1, col2, col3, col4 = st.columns(4)
        qtd_filtrada = len(filtered_df)
        with col1:
            st.metric("üìã Atendimentos", f"{qtd_filtrada:,}", f"{qtd_filtrada/total_atendimentos*100:.1f}% do total")
        sat_filtrada = filtered_df['Satisfa√ß√£o do Cliente (1-5)'].mean()
        with col2:
            delta_sat = sat_filtrada - satisfacao_media
            st.metric("üòä Satisfa√ß√£o", f"{sat_filtrada:.2f}/5", f"{delta_sat:.2f}")
        tma_filtrado = filtered_df['Tempo M√©dio de Atendimento (TMA) em minutos'].mean()
        with col3:
            delta_tma = tma_filtrado - tma_global
            st.metric("‚è±Ô∏è TMA", f"{tma_filtrado:.2f} min", f"{delta_tma:.2f} min")
        taxa_filtrada = filtered_df['Resolu√ß√£o no Primeiro Contato?'].mean() * 100
        with col4:
            delta_taxa = taxa_filtrada - taxa_resolucao
            st.metric("‚úÖ Resolu√ß√£o 1¬∫ Contato", f"{taxa_filtrada:.1f}%", f"{delta_taxa:.1f}%")
        if 'Data' in filtered_df.columns:
            df_tendencia = filtered_df.groupby('Data').agg({'Protocolo': 'count', 'Satisfa√ß√£o do Cliente (1-5)': 'mean'}).reset_index()
            fig_tendencia = px.line(df_tendencia, x='Data', y=['Protocolo', 'Satisfa√ß√£o do Cliente (1-5)'], title='Tend√™ncia de Volume e Satisfa√ß√£o no Per√≠odo Selecionado')
            st.plotly_chart(fig_tendencia, use_container_width=True)
    else:
        st.warning("Nenhum dado encontrado para os filtros selecionados.")
st.divider()

# ETAPA 6: TOMADA DE DECIS√ÉO
st.markdown('<div class="section-title">6. Tomada de Decis√£o ‚úÖ</div>', unsafe_allow_html=True)
if st.session_state.df_limpo is not None:
    st.markdown('<div class="subheader">Insights e Recomenda√ß√µes</div>', unsafe_allow_html=True)
    if st.session_state.df_limpo is None or st.session_state.df_limpo.empty:
        st.warning("‚ö†Ô∏è O DataFrame `df_limpo` est√° vazio ou n√£o foi inicializado. Verifique a etapa de limpeza de dados.")
    else:
        st.info(f"‚úÖ DataFrame `df_limpo` cont√©m {len(st.session_state.df_limpo)} registros.")
    if 'Hora' in st.session_state.df_limpo.columns:
        df_horas_pico = st.session_state.df_limpo.groupby('Hora').agg({'Protocolo': 'count', 'Tempo de Espera em minutos': 'mean'}).reset_index()
        horas_pico = df_horas_pico.nlargest(3, 'Protocolo')['Hora'].tolist()
        horas_vale = df_horas_pico.nsmallest(3, 'Protocolo')['Hora'].tolist()
    else:
        horas_pico = []
        horas_vale = []
        st.warning("‚ö†Ô∏è Coluna 'Hora' n√£o encontrada em `df_limpo`. A an√°lise de hor√°rios de pico ser√° ignorada.")
    st.markdown("### 1. Otimiza√ß√£o de Escalas de Operadores")
    if horas_pico and horas_vale:
        st.markdown(f"""
        **Insight:** Identificamos os seguintes hor√°rios de pico: {', '.join([f"{h}h" for h in horas_pico])}, que apresentam maior volume de atendimentos e tempos de espera mais longos.
        **Recomenda√ß√£o:** 
        - Aumentar o n√∫mero de operadores nos hor√°rios de pico
        - Realizar treinamentos e reuni√µes nos hor√°rios de menor movimento: {', '.join([f"{h}h" for h in horas_vale])}
        - Implementar um sistema de escala din√¢mica baseado na previs√£o de demanda
        **Impacto estimado:** Redu√ß√£o de at√© 30% no tempo de espera nos hor√°rios de pico, aumentando a satisfa√ß√£o do cliente e a produtividade.
        """)
    else:
        st.warning("‚ö†Ô∏è N√£o foi poss√≠vel identificar hor√°rios de pico ou vale. Verifique os dados na coluna 'Hora'.")
    st.divider()
    
    st.markdown("### 2. Redu√ß√£o do Tempo M√©dio de Atendimento em Gargalos")
    try:
        df_gargalos = st.session_state.df_limpo.groupby('Tipo de Atendimento').agg({'Protocolo': 'count', 'Tempo M√©dio de Atendimento (TMA) em minutos': 'mean'}).reset_index()
        gargalos = df_gargalos.nlargest(3, 'Tempo M√©dio de Atendimento (TMA) em minutos')
        if not gargalos.empty:
            gargalos_list = [f"{tipo} (TMA: {tma:.2f} min)" for tipo, _, tma in gargalos[['Tipo de Atendimento', 'Protocolo', 'Tempo M√©dio de Atendimento (TMA) em minutos']].values]
            st.markdown(f"""
            **Insight:** Os seguintes tipos de atendimento apresentam TMA significativamente acima da m√©dia:
            {', '.join(gargalos_list)}
            **Recomenda√ß√£o:** 
            - Desenvolver scripts otimizados para esses tipos de atendimento
            - Criar base de conhecimento espec√≠fica para resolu√ß√£o r√°pida desses casos
            - Direcionar esses atendimentos para operadores mais experientes nesses assuntos
            - Analisar possibilidade de automa√ß√£o parcial desses processos
            **Impacto estimado:** Redu√ß√£o de 15-25% no TMA desses tipos de atendimento, aumentando a capacidade de atendimento sem adicionar recursos.
            """)
        else:
            st.warning("‚ö†Ô∏è N√£o foram encontrados gargalos de TMA. Verifique os dados na coluna 'Tipo de Atendimento'.")
    except Exception as e:
        st.error(f"‚ùå Erro ao calcular gargalos de TMA: {str(e)}")
    st.divider()
    
    st.markdown("### 3. Plano de A√ß√£o para Produtos/Servi√ßos Problem√°ticos")
    try:
        df_produtos_problematicos = st.session_state.df_limpo.groupby('Produto/Servi√ßo Relacionado').agg({'Protocolo': 'count', 'Satisfa√ß√£o do Cliente (1-5)': 'mean'}).reset_index()
        min_volume = len(st.session_state.df_limpo) * 0.01
        df_produtos_problematicos = df_produtos_problematicos[df_produtos_problematicos['Protocolo'] >= min_volume]
        produtos_problematicos = df_produtos_problematicos.nsmallest(3, 'Satisfa√ß√£o do Cliente (1-5)')
        if not produtos_problematicos.empty:
            produtos_list = [f"{prod} (Satisfa√ß√£o: {sat:.2f}/5)" for prod, _, sat in produtos_problematicos[['Produto/Servi√ßo Relacionado', 'Protocolo', 'Satisfa√ß√£o do Cliente (1-5)']].values]
            st.markdown(f"""
            **Insight:** Os seguintes produtos/servi√ßos apresentam √≠ndices de satisfa√ß√£o abaixo da m√©dia:
            {', '.join(produtos_list)}
            **Recomenda√ß√£o:** 
            - Realizar an√°lise detalhada dos motivos de insatisfa√ß√£o com esses produtos
            - Desenvolver treinamento espec√≠fico para os operadores sobre esses produtos
            - Criar um canal de comunica√ß√£o direta com as √°reas respons√°veis por esses produtos
            - Implementar monitoramento em tempo real dos atendimentos relacionados a esses itens
            **Impacto estimado:** Aumento de 0.5-1.0 ponto na satisfa√ß√£o m√©dia desses produtos em 3 meses.
            """)
        else:
            st.warning("‚ö†Ô∏è N√£o foram encontrados produtos/servi√ßos problem√°ticos. Verifique os dados na coluna 'Produto/Servi√ßo Relacionado'.")
    except Exception as e:
        st.error(f"‚ùå Erro ao identificar produtos problem√°ticos: {str(e)}")
    st.divider()
    
    st.markdown("### 4. Programa de Compartilhamento de Melhores Pr√°ticas")
    try:
        required_columns = ['Nome do Operador', 'Protocolo', 'Satisfa√ß√£o do Cliente (1-5)', 'Resolu√ß√£o no Primeiro Contato?', 'Tempo M√©dio de Atendimento (TMA) em minutos']
        missing_columns = [col for col in required_columns if col not in st.session_state.df_limpo.columns]
        if missing_columns:
            st.error(f"‚ùå Colunas necess√°rias ausentes em `df_limpo`: {', '.join(missing_columns)}")
        else:
            df_melhores_operadores = st.session_state.df_limpo.groupby('Nome do Operador').agg({
                'Protocolo': 'count',
                'Satisfa√ß√£o do Cliente (1-5)': 'mean',
                'Resolu√ß√£o no Primeiro Contato?': 'mean',
                'Tempo M√©dio de Atendimento (TMA) em minutos': 'mean'
            }).reset_index()
            min_volume_operador = len(st.session_state.df_limpo) * 0.02
            df_melhores_operadores = df_melhores_operadores[df_melhores_operadores['Protocolo'] >= min_volume_operador]
            st.info(f"üìä Ap√≥s filtro de volume m√≠nimo ({min_volume_operador:.0f} atendimentos), `df_melhores_operadores` cont√©m {len(df_melhores_operadores)} operadores.")
            df_melhores_operadores['Score'] = (df_melhores_operadores['Satisfa√ß√£o do Cliente (1-5)'] * 
                                             df_melhores_operadores['Resolu√ß√£o no Primeiro Contato?']) / \
                                             (df_melhores_operadores['Tempo M√©dio de Atendimento (TMA) em minutos'] / 
                                              df_melhores_operadores['Tempo M√©dio de Atendimento (TMA) em minutos'].mean())
            melhores_operadores = df_melhores_operadores.nlargest(3, 'Score')
            if not melhores_operadores.empty:
                operadores_list = [f"{nome} (Satisfa√ß√£o: {sat:.2f}/5, Resolu√ß√£o 1¬∫ Contato: {res*100:.1f}%)" 
                                   for nome, _, sat, res, _ in melhores_operadores[['Nome do Operador', 'Protocolo', 
                                                                                   'Satisfa√ß√£o do Cliente (1-5)', 
                                                                                   'Resolu√ß√£o no Primeiro Contato?', 
                                                                                   'Tempo M√©dio de Atendimento (TMA) em minutos']].values]
                st.markdown(f"""
                **Insight:** Identificamos operadores que conseguem alta satisfa√ß√£o e resolu√ß√£o no primeiro contato com tempos de atendimento eficientes:
                {', '.join(operadores_list)}
                **Recomenda√ß√£o:** 
                - Criar um programa de mentoria onde esses operadores compartilhem suas t√©cnicas
                - Gravar atendimentos exemplares para uso em treinamentos
                - Implementar reconhecimento e premia√ß√£o para incentivar a ado√ß√£o das melhores pr√°ticas
                - Estruturar um plano de carreira para operadores de alto desempenho
                **Impacto estimado:** Aumento de 10-15% na taxa de resolu√ß√£o no primeiro contato e 0.3-0.5 ponto na satisfa√ß√£o m√©dia geral.
                """)
            else:
                st.warning("‚ö†Ô∏è Nenhum operador atendeu ao crit√©rio de volume m√≠nimo para ser considerado 'top performer'. Considere ajustar o limite de volume m√≠nimo (`min_volume_operador`) ou verificar a distribui√ß√£o de atendimentos por operador.")
            st.markdown("""
            **Insight Adicional 1: Identificar T√©cnicas Espec√≠ficas dos Top Operadores**  
            Os operadores com maior pontua√ß√£o combinam alta satisfa√ß√£o (>4.0/5) e resolu√ß√£o (>80%) com TMAs eficientes. Suas t√©cnicas, como scripts eficazes ou diagn√≥stico r√°pido, podem ser extra√≠das de grava√ß√µes.  
            **Recomenda√ß√£o:** Analisar grava√ß√µes com NLP para criar um "Playbook de Melhores Pr√°ticas".  
            **Impacto Estimado:** Aumento de 5-10% na resolu√ß√£o e 0.2-0.4 pontos na satisfa√ß√£o em 6 meses.
            **Insight Adicional 2: Segmentar Desempenho por Tipo de Atendimento**  
            Top operadores podem se destacar em tipos espec√≠ficos de atendimento (e.g., suporte t√©cnico).  
            **Recomenda√ß√£o:** Analisar o `Score` por `Tipo de Atendimento` e criar treinamentos espec√≠ficos.  
            **Impacto Estimado:** Redu√ß√£o de 10-15% no TMA e aumento de 8-12% na resolu√ß√£o por categoria.
            **Insight Adicional 3: Aproveitar Top Operadores para Coaching em Tempo Real**  
            Top operadores podem orientar colegas durante atendimentos complexos, especialmente em hor√°rios de pico.  
            **Recomenda√ß√£o:** Implementar coaching em tempo real durante `horas_pico` com mentores designados.  
            **Impacto Estimado:** Redu√ß√£o de 10% nas escala√ß√µes e aumento de 0.3-0.5 pontos na satisfa√ß√£o em 3 meses.
            **Insight Adicional 4: Gamificar a Ado√ß√£o de Melhores Pr√°ticas**  
            O `Score` pode motivar operadores a adotarem pr√°ticas dos melhores via competi√ß√£o saud√°vel.  
            **Recomenda√ß√£o:** Criar um leaderboard e oferecer recompensas por melhorias no `Score`.  
            **Impacto Estimado:** Aumento de 20-30% na ado√ß√£o de pr√°ticas, com 5-10% de melhoria na resolu√ß√£o em 4 meses.
            **Insight Adicional 5: Analisar Padr√µes de Colabora√ß√£o Interdepartamental**  
            Top operadores provavelmente t√™m baixas taxas de escala√ß√£o, indicando colabora√ß√£o eficaz.  
            **Recomenda√ß√£o:** Analisar escala√ß√µes e criar uma plataforma de compartilhamento de conhecimento.  
            **Impacto Estimado:** Redu√ß√£o de 15-20% nas escala√ß√µes e 0.3-0.5 pontos na satisfa√ß√£o.
            """)
    except Exception as e:
        st.error(f"‚ùå Erro ao processar o Programa de Compartilhamento de Melhores Pr√°ticas: {str(e)}")
    st.divider()
    
    st.markdown("### 5. Estrat√©gia Omnichannel Otimizada")
    try:
        df_canais_eficiencia = st.session_state.df_limpo.groupby('Canal de Atendimento').agg({
            'Protocolo': 'count',
            'Tempo M√©dio de Atendimento (TMA) em minutos': 'mean',
            'Satisfa√ß√£o do Cliente (1-5)': 'mean',
            'Resolu√ß√£o no Primeiro Contato?': 'mean'
        }).reset_index()
        df_canais_eficiencia['Efici√™ncia'] = (df_canais_eficiencia['Satisfa√ß√£o do Cliente (1-5)'] * 
                                              df_canais_eficiencia['Resolu√ß√£o no Primeiro Contato?']) / \
                                              df_canais_eficiencia['Tempo M√©dio de Atendimento (TMA) em minutos']
        canais_eficientes = df_canais_eficiencia.nlargest(2, 'Efici√™ncia')
        canais_ineficientes = df_canais_eficiencia.nsmallest(2, 'Efici√™ncia')
        if not canais_eficientes.empty and not canais_ineficientes.empty:
            eficientes_list = [f"{canal}" for canal in canais_eficientes['Canal de Atendimento'].values]
            ineficientes_list = [f"{canal}" for canal in canais_ineficientes['Canal de Atendimento'].values]
            st.markdown(f"""
            **Insight:** Os canais {', '.join(eficientes_list)} apresentam melhor efici√™ncia (combina√ß√£o de satisfa√ß√£o, resolu√ß√£o e tempo), enquanto {', '.join(ineficientes_list)} mostram menor efici√™ncia.
            **Recomenda√ß√£o:** 
            - Priorizar investimentos nos canais mais eficientes
            - Implementar estrat√©gias de migra√ß√£o de clientes para canais digitais mais eficientes
            - Integrar dados entre canais para experi√™ncia consistente
            - Reavaliar processos nos canais menos eficientes ou considerar sua descontinua√ß√£o
            **Impacto estimado:** Redu√ß√£o de 10% nos custos de atendimento e aumento de 5% na satisfa√ß√£o geral.
            """)
        else:
            st.warning("‚ö†Ô∏è N√£o foi poss√≠vel identificar canais eficientes/ineficientes. Verifique os dados na coluna 'Canal de Atendimento'.")
    except Exception as e:
        st.error(f"‚ùå Erro ao processar a Estrat√©gia Omnichannel Otimizada: {str(e)}")
    st.divider()
    
    st.markdown("### 6. Conclus√£o e ROI Estimado")
    st.markdown("""
    **Conclus√£o:** 
    A an√°lise detalhada dos dados de SAC/Telemarketing revela oportunidades significativas de otimiza√ß√£o em v√°rias dimens√µes: escalas de operadores, processos de atendimento, tratamento de produtos problem√°ticos, dissemina√ß√£o de melhores pr√°ticas e estrat√©gia de canais.
    **ROI Estimado:** 
    - **Redu√ß√£o de custos:** 15-20% atrav√©s da otimiza√ß√£o de escalas e processos
    - **Aumento de produtividade:** 10-15% com a implementa√ß√£o das melhores pr√°ticas
    - **Melhoria na satisfa√ß√£o:** 0.5-1.0 ponto na escala de satisfa√ß√£o
    - **Aumento na taxa de resolu√ß√£o no primeiro contato:** 10-15%
    **Pr√≥ximos passos recomendados:** 
    1. Implementar dashboard em tempo real para monitoramento cont√≠nuo dos KPIs
    2. Estabelecer metas espec√≠ficas para cada √°rea de melhoria identificada
    3. Formar equipes multidisciplinares para implementa√ß√£o das recomenda√ß√µes
    4. Revisar resultados mensalmente e ajustar estrat√©gias conforme necess√°rio
    """)
st.divider()

# Footer
st.markdown("""
<div style='text-align: center; color: #696969; margin-top: 2em;'>
    Desenvolvido com ‚ù§Ô∏è usando Streamlit e Python | ¬© 2025
</div>
""", unsafe_allow_html=True)

if __name__ == "__main__":
    pass